rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
    
    function getCollabRole(userUid, access) {
      let collaborators = access.collaborators;
      return userUid in collaborators ? collaborators[userUid].role : null;
    }

    function allowCollabView(userUid, access) {
      let role = getCollabRole(userUid, access);
      return role == "viewer" || role == "editor";
    }

    function allowCollabEdit(userUid, access) {
      let role = getCollabRole(userUid, access);
      return role == "editor"
    }

    match /libraries/{userId} {

    	allow read, delete: if request.auth != null && request.auth.uid == userId;
      allow create, update: if request.auth != null;
    }
    match /access/{deckId} {
      // Read permission is always granted so we can detect 404 (Not Found) errors
      allow read: if true;
      allow update, delete: if request.auth.uid == resource.data.owner;
      allow create: if request.auth.uid == request.resource.data.owner;
    }
    match /decks/{deckId} {

      function grantDeckRead(deckId) {
        let access = get(/databases/$(database)/documents/access/$(deckId)).data;
        let isOwner = request.auth.uid == access.owner;
        let general = access.general;
        let generalCanView = general is string && (general == "viewer" || general == "editor");
        
        return isOwner || generalCanView || allowCollabView(request.auth.uid, access);
      }
      function grantDeckUpdate(deckId) {
        let access = get(/databases/$(database)/documents/access/$(deckId)).data;
        let isOwner = request.auth.uid == access.owner;
        let general = access.general;
        let generalCanEdit = general is string && general == "editor";
        return isOwner || generalCanEdit || allowCollabEdit(request.auth.uid, access);
      }
      function grantDeckDelete(deckId) {
        let access = get(/databases/$(database)/documents/access/$(deckId)).data;
        let isOwner = request.auth.uid == access.owner;
        return isOwner;
      }

    	allow read: if grantDeckRead(deckId);
      allow update: if grantDeckUpdate(deckId);
      allow delete: if grantDeckDelete(deckId);
      allow create: if request.auth != null
    }
    match /decks/{deckId}/cards/{cardId}/yjs/{document=**} {
      allow read, write: if true;
    }
    match /cards/{cardId} {
      function grantCardRead() {
        let access= get(/databases/$(database)/documents/access/$(resource.data.access)).data;
        let isOwner = request.auth.uid == access.owner;
        let general = access.general;
        let generalCanView = general is string && (general == "viewer" || general == "editor");
        return isOwner || generalCanView || allowCollabView(request.auth.uid, access);
      }
      function grantCardWrite() {
        let access= get(/databases/$(database)/documents/access/$(resource.data.access)).data;
        let isOwner = request.auth.uid == access.owner;
        let generalCanEdit = access.general is string && access.general == "editor";
        return isOwner || generalCanEdit  || allowCollabEdit(request.auth.uid, access);
      }
      function grantCardCreate() {
        let access = get(/databases/$(database)/documents/access/$(request.resource.data.access)).data;
        return request.auth.uid == access.owner;
      }
    	allow read: if grantCardRead();
      allow update, delete: if grantCardWrite();
      allow create: if grantCardCreate();
    }    
    match /metadata/{resourceId} {
      allow read: if true;
      allow update, delete: if request.auth.uid == resource.data.owner;
      allow create: if request.auth.uid == request.resource.data.owner;
    }
    match /search/{tag} {
      allow read;
      allow write: if request.auth != null;
    }
    match /tags/{resourceId} {
      allow read,write: if request.auth != null;
    }
    match /identities/{userUid} {
      allow create: if request.auth.uid == userUid;
      allow read: if true;
      allow update, delete: if request.auth.uid == userUid;
    }
  }
}