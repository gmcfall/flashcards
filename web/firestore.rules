rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
    match /libraries/{userId} {
    	allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    match /access/{deckId} {
      function grantAccessRead(deckId) {
        let access = resource.data;
        let isOwner = request.auth.uid == access.owner;
        let hasGeneralRole = access.general is string;
        return isOwner || hasGeneralRole;
      }
      allow read: if grantAccessRead(deckId);
      allow update, delete: if request.auth.uid == resource.data.owner;
      allow create: if request.auth.uid == request.resource.data.owner;
    }
    match /decks/{deckId} {
      function grantDeckRead(deckId) {
        let access = get(/databases/$(database)/documents/access/$(deckId)).data;
        let isOwner = request.auth.uid == access.owner;
        let generalCanView = access.general is string && access.general == "viewer";
        return isOwner || generalCanView;
      }
      function grantDeckWrite(deckId) {
        let access = get(/databases/$(database)/documents/access/$(deckId)).data;
        return request.auth.uid == access.owner;
      }

    	allow read: if grantDeckRead(deckId);
      allow update, delete: if grantDeckWrite(deckId);
      allow create: if request.auth != null
    }
    match /cards/{cardId} {
      function grantCardRead() {
        let access= get(/databases/$(database)/documents/access/$(resource.data.access)).data;
        let isOwner = request.auth.uid == access.owner;
        let generalCanView = access.general is string && access.general == "viewer";
        return isOwner || generalCanView;
      }
      function grantCardWrite() {
        let access = get(/databases/$(database)/documents/access/$(resource.data.access)).data;
        return request.auth.uid == access.owner;
      }
      function grantCardCreate() {
        let access = get(/databases/$(database)/documents/access/$(request.resource.data.access)).data;
        return request.auth.uid == access.owner;
      }
    	allow read: if grantCardRead();
      allow update, delete: if grantCardWrite();
      allow create: if grantCardCreate();
    }    
    match /metadata/{resourceId} {
      allow read, update, delete: if request.auth.uid == resource.data.owner;
      allow create: if request.auth.uid == request.resource.data.owner;
    }
    match /search/{tag} {
      allow read;
      allow write: if request.auth != null;
    }
    match /tags/{resourceId} {
      allow read,write: if request.auth != null;
    }
  }
}